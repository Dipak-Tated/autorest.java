/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodyduration;

import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.VoidResponse;
import fixtures.bodyduration.models.ErrorException;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import org.threeten.bp.Duration;

/**
 * An instance of this class provides access to all the operations defined in
 * Durations.
 */
public interface Durations {
    /**
     * Get null duration value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Duration object if successful.
     */
    Duration getNull();

    /**
     * Get null duration value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Duration> getNullAsync(ServiceCallback<Duration> serviceCallback);

    /**
     * Get null duration value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Single<BodyResponse<Duration>> getNullWithRestResponseAsync();

    /**
     * Get null duration value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Maybe<Duration> getNullAsync();

    /**
     * Put a positive duration value.
     *
     * @param durationBody the Duration value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putPositiveDuration(@NonNull Duration durationBody);

    /**
     * Put a positive duration value.
     *
     * @param durationBody the Duration value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Void> putPositiveDurationAsync(@NonNull Duration durationBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put a positive duration value.
     *
     * @param durationBody the Duration value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    Single<VoidResponse> putPositiveDurationWithRestResponseAsync(@NonNull Duration durationBody);

    /**
     * Put a positive duration value.
     *
     * @param durationBody the Duration value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    Completable putPositiveDurationAsync(@NonNull Duration durationBody);

    /**
     * Get a positive duration value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Duration object if successful.
     */
    Duration getPositiveDuration();

    /**
     * Get a positive duration value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Duration> getPositiveDurationAsync(ServiceCallback<Duration> serviceCallback);

    /**
     * Get a positive duration value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Single<BodyResponse<Duration>> getPositiveDurationWithRestResponseAsync();

    /**
     * Get a positive duration value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Maybe<Duration> getPositiveDurationAsync();

    /**
     * Get an invalid duration value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Duration object if successful.
     */
    Duration getInvalid();

    /**
     * Get an invalid duration value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Duration> getInvalidAsync(ServiceCallback<Duration> serviceCallback);

    /**
     * Get an invalid duration value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Single<BodyResponse<Duration>> getInvalidWithRestResponseAsync();

    /**
     * Get an invalid duration value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Maybe<Duration> getInvalidAsync();
}
